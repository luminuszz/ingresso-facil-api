generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RommType {
  IMAX
  VIP
  STANDARD
}

enum TicketStatus {
  RESERVED
  PURCHASED
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String   @map("password_hash")
  role         UserRole @default(USER)
  Ticket       Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id           String         @id @default(cuid())
  title        String
  description  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  MovieSession MovieSession[]
}

model Ticket {
  id             String       @id @default(cuid())
  ownerTo        String       @map("ownerTo")
  movieSessionId String       @map("movie_session_id")
  roomId         String       @map("room_id")
  seatId         String       @map("seat_id")
  status         TicketStatus @default(RESERVED)
  room           Room         @relation(fields: [roomId], references: [id])
  owner          User         @relation(fields: [ownerTo], references: [id])
  seat           Seat         @relation(fields: [seatId], references: [id])
  MovieSession   MovieSession @relation(fields: [movieSessionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MovieSession {
  id String @id @default(cuid())

  movieId String   @map("movie_id")
  roomId  String   @map("room_id")
  startAt DateTime @map("start_at")
  endAt   DateTime @map("end_at")
  price   Float

  Movie Movie @relation(fields: [movieId], references: [id])
  Room  Room  @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Ticket Ticket[]
}

model Room {
  id        String   @id @default(cuid())
  number    Int      @unique
  type      RommType @default(STANDARD)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MovieSession MovieSession[]
  Seat         Seat[]
  Ticket       Ticket[]
}

model Seat {
  id        String   @id @default(cuid())
  number    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  Ticket    Ticket[]
}
